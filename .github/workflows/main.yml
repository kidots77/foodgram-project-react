# Файл main.yml
# Имя workflow
name: Main Foodgram Workflow
# Перечень событий-триггеров, при которых должен запускаться workflow
on:
  # Событие push возникает,
  # когда изменения исходного кода приходят на сервер GitHub
  push:
    # Отслеживаем изменения только в ветке main
    branches:
      - master

      
# Перечень задач
jobs:
  # Единственная задача — склонировать код 
  # и вывести в консоль дерево файлов
  checkout-and-print-tree:
    runs-on: ubuntu-latest
    steps:
      # На GitHub Actions есть готовые описания шагов, 
      # их можно использовать в своих workflow.
      # Применим готовое описание шага для получения исходного кода
      - name: Check out repository code  # Имя шага задаём сами
        uses: actions/checkout@v3  # Берём готовое решение из библиотеки GitHub Actions
      # Выполняем команду tree в текущей директории
      - name: Print project tree
        run: tree .


# name: Main Foodgram workflow

# on:
#   push:

# jobs:
#   tests:
#     runs-on: ubuntu-latest
#     strategy:
#       matrix:
#         python-version: ["3.8", "3.9", "3.10"]
#     services:
#       postgres:
#         image: postgres:13.10
#         env:
#           POSTGRES_USER: foodgram_user
#           POSTGRES_PASSWORD: foodgram_password
#           POSTGRES_DB: foodgram
#         ports:
#           - 5432:5432
#         options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
#     steps:
#     - uses: actions/checkout@v3
#     - name: Set up Python ${{ matrix.python-version }}
#       uses: actions/setup-python@v4
#       with:
#         python-version: ${{ matrix.python-version }}

#     - name: Install dependencies
#       run: |
#         python -m pip install --upgrade pip 
#         pip install flake8==6.0.0 flake8-isort==6.0.0
#         pip install -r ./backend/requirements.txt 
#     - name: Test with flake8 and django tests
#       env:
#         POSTGRES_USER: foodgram_user
#         POSTGRES_PASSWORD: foodgram_password
#         POSTGRES_DB: foodgram
#         DB_HOST: 127.0.0.1
#         DB_PORT: 5432
#         SECRET_KEY: ${{ secrets.SECRET_KEY }}
#         DEBUG: ${{ secrets.DEBUG }}
#       run: |
#         python -m flake8 backend/
#         cd backend/
#         python manage.py test

#   build_and_push_to_docker_hub:
#     name: Push Docker image to DockerHub
#     runs-on: ubuntu-latest
#     needs: tests
#     steps:
#       - name: Check out the repo
#         uses: actions/checkout@v3
#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v2
#       - name: Login to Docker 
#         uses: docker/login-action@v2
#         with:
#           username: ${{ secrets.DOCKER_USERNAME }}
#           password: ${{ secrets.DOCKER_PASSWORD }}
#       - name: Push to DockerHub
#         uses: docker/build-push-action@v4
#         with:
#           context: ./backend/
#           push: true
#           tags: ${{ secrets.DOCKER_USERNAME }}/foodgram_backend:latest

#   frontend_tests:
#     runs-on: ubuntu-latest

#     steps:
#     - uses: actions/checkout@v3
#     - name: Set up nodeJS
#       uses: actions/setup-node@v3
#       with:
#         node-version: 18

#     - name: Install dependencies
#       run: |
#         cd frontend/
#         npm ci

#     - name: Test frontend
#       run: |
#         cd frontend/
#         npm run test

#   build_frontend_and_push_to_docker_hub:
#     name: Push frontend Docker image to DockerHub
#     runs-on: ubuntu-latest
#     needs: frontend_tests
#     steps:
#       - name: Check out the repo
#         uses: actions/checkout@v3
#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v2
#       - name: Login to Docker 
#         uses: docker/login-action@v2
#         with:
#           username: ${{ secrets.DOCKER_USERNAME }}
#           password: ${{ secrets.DOCKER_PASSWORD }}
#       - name: Push to DockerHub
#         uses: docker/build-push-action@v4
#         with:
#           context: ./frontend/
#           push: true
#           tags: ${{ secrets.DOCKER_USERNAME }}/foodgram_frontend:latest

#   build_gateway_and_push_to_docker_hub:
#     name: Push gateway Docker image to DockerHub
#     runs-on: ubuntu-latest
#     steps:
#       - name: Check out the repo
#         uses: actions/checkout@v3
#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v2
#       - name: Login to Docker 
#         uses: docker/login-action@v2
#         with:
#           username: ${{ secrets.DOCKER_USERNAME }}
#           password: ${{ secrets.DOCKER_PASSWORD }}
#       - name: Push to DockerHub
#         uses: docker/build-push-action@v4
#         with:
#           context: ./nginx/
#           push: true
#           tags: ${{ secrets.DOCKER_USERNAME }}/foodgram_gateway:latest

#   deploy:
#     if: github.ref == 'refs/heads/main'
#     runs-on: ubuntu-latest
#     needs: 
#       - tests
#       - build_and_push_to_docker_hub
#       - build_frontend_and_push_to_docker_hub
#       - build_gateway_and_push_to_docker_hub
#     steps:
#     - name: Checkout repo
#       uses: actions/checkout@v3
#     - name: Copy docker-compose.yml via ssh
#       uses: appleboy/scp-action@master
#       with:
#         host: ${{ secrets.HOST }}
#         username: ${{ secrets.USER }}
#         key: ${{ secrets.SSH_KEY }}
#         passphrase: ${{ secrets.SSH_PASSPHRASE }}
#         source: "docker-compose.production.yml"
#         target: "foodgram"
#     - name: Executing remote ssh commands to deploy
#       uses: appleboy/ssh-action@master
#       with:
#         host: ${{ secrets.HOST }}
#         username: ${{ secrets.USER }}
#         key: ${{ secrets.SSH_KEY }}
#         passphrase: ${{ secrets.SSH_PASSPHRASE }}
#         script: |
#           cd foodgram
#           # Выполняет pull образов с Docker Hub
#           sudo docker compose -f docker-compose.production.yml pull
#           # Перезапускает все контейнеры в Docker Compose
#           sudo docker compose -f docker-compose.production.yml down
#           sudo docker compose -f docker-compose.production.yml up -d
#           # Выполняет миграции и сбор статики
#           sudo docker compose -f docker-compose.production.yml exec backend python manage.py migrate
#           sudo docker compose -f docker-compose.production.yml exec backend python manage.py collectstatic
#           sudo docker compose -f docker-compose.production.yml exec backend cp -r /app/collected_static/. /backend_static/static/

#   send_message:
#     runs-on: ubuntu-latest
#     needs: deploy
#     steps:
#     - name: Send message
#       uses: appleboy/telegram-action@master
#       with:
#         to: ${{ secrets.TELEGRAM_TO }}
#         token: ${{ secrets.TELEGRAM_TOKEN }}
#         message: Деплой успешно выполнен пользователем - ${{github.actor}}. Комментарий коммита - ${{github.event.commits[0].message}}